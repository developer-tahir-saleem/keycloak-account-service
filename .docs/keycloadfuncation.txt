
//	public String removeUser(Map<String, Object> request) {
//		Keycloak keycloak = KeyCloakConnectionProvider.getConnection();
//		String userId = (String) request.get(JsonKey.USER_ID);
//		UserResource resource =
//				keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//
//		if (isNotNull(resource)) {
//			try {
//				resource.remove();
//			} catch (Exception ex) {
//				throw new ProjectCommonException(ex.getMessage(), ex.getMessage(),
//						ResponseCode.CLIENT_ERROR.getResponseCode());
//			}
//
//		}
//		return JsonKey.SUCCESS;
//	}

//	public boolean doPasswordUpdate(String userId, String password) {
//		boolean response = false;
//		try {
//			UserResource resource =
//					keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//			CredentialRepresentation newCredential = new CredentialRepresentation();
//			newCredential.setValue(password);
//			newCredential.setType(CredentialRepresentation.PASSWORD);
//			newCredential.setTemporary(true);
//			resource.resetPassword(newCredential);
//			response = true;
//		} catch (Exception ex) {
//			ProjectLogger.log(ex.getMessage(),ex);
//		}
//		return response;
//	}

//	public String getLastLoginTime(String userId) {
//		String lastLoginTime = null;
//		try {
//			UserResource resource =
//					keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//			UserRepresentation ur = resource.toRepresentation();
//			Map<String, List<String>> map = ur.getAttributes();
//			if (map == null) {
//				map = new HashMap<>();
//			}
//			List<String> list = map.get(JsonKey.LAST_LOGIN_TIME);
//			if (list != null && !list.isEmpty()) {
//				lastLoginTime = list.get(0);
//			}
//		} catch (Exception e) {
//			ProjectLogger.log(e.getMessage(), e);
//		}
//		return lastLoginTime;
//	}
//public String setEmailVerifiedTrue(String userId) {
//	try {
//		UserResource resource =
//				keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//		UserRepresentation ur = resource.toRepresentation();
//		ur.setEmailVerified(true);
//		if (isNotNull(resource)) {
//			try {
//				resource.update(ur);
//			} catch (Exception ex) {
//				ProjectLogger.log(ex.getMessage(), ex);
//				throw new ProjectCommonException(ResponseCode.invalidUsrData.getErrorCode(),
//						ResponseCode.invalidUsrData.getErrorMessage(),
//						ResponseCode.CLIENT_ERROR.getResponseCode());
//			}
//
//		}
//	} catch (Exception e) {
//		ProjectLogger.log(e.getMessage(), e);
//		throw new ProjectCommonException(ResponseCode.invalidUsrData.getErrorCode(),
//				ResponseCode.invalidUsrData.getErrorMessage(),
//				ResponseCode.CLIENT_ERROR.getResponseCode());
//	}
//	return JsonKey.SUCCESS;
//}

//	public String setEmailVerifiedAsFalse(String userId) {
//		try {
//			UserResource resource =
//					keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//			UserRepresentation ur = resource.toRepresentation();
//			ur.setEmailVerified(false);
//			if (isNotNull(resource)) {
//				try {
//					resource.update(ur);
//				} catch (Exception ex) {
//					ProjectLogger.log(ex.getMessage(), ex);
//					throw new ProjectCommonException(ResponseCode.invalidUsrData.getErrorCode(),
//							ResponseCode.invalidUsrData.getErrorMessage(),
//							ResponseCode.CLIENT_ERROR.getResponseCode());
//				}
//
//			}
//		} catch (Exception e) {
//			ProjectLogger.log(e.getMessage(), e);
//			throw new ProjectCommonException(ResponseCode.invalidUsrData.getErrorCode(),
//					ResponseCode.invalidUsrData.getErrorMessage(),
//					ResponseCode.CLIENT_ERROR.getResponseCode());
//		}
//		return JsonKey.SUCCESS;
//	}


//
//	public boolean addRoleToUser(PasswordCredential realmAdminCreds, String tenantId, String username, String roleName) throws IamAdminServicesException {
//
//		Keycloak client = null;
//		try{
//			client = TenantManagementKeycloakImpl.getClient(ServerSettings.getIamServerUrl(), tenantId, realmAdminCreds);
//			List<UserRepresentation> retrieveCreatedUserList = client.realm(tenantId).users().search(username,
//					null,
//					null,
//					null,
//					0, 1);
//			UserResource retrievedUser = client.realm(tenantId).users().get(retrieveCreatedUserList.get(0).getId());
//
//			// Add user to the role
//			RoleResource roleResource = client.realm(tenantId).roles().get(roleName);
//			retrievedUser.roles().realmLevel().add(Arrays.asList(roleResource.toRepresentation()));
//			return true;
//		} catch (ApplicationSettingsException ex) {
//			logger.error("Error getting values from property file, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error getting values from property file, reason " + ex.getMessage());
//			throw exception;
//		} finally {
//			if (client != null) {
//				client.close();
//			}
//		}
//	}



//	public boolean removeRoleFromUser(PasswordCredential realmAdminCreds, String tenantId, String username, String roleName) throws IamAdminServicesException {
//
//		Keycloak client = null;
//		try{
//			client = TenantManagementKeycloakImpl.getClient(ServerSettings.getIamServerUrl(), tenantId, realmAdminCreds);
//			List<UserRepresentation> retrieveCreatedUserList = client.realm(tenantId).users().search(username,
//					null,
//					null,
//					null,
//					0, 1);
//			UserResource retrievedUser = client.realm(tenantId).users().get(retrieveCreatedUserList.get(0).getId());
//
//			// Remove role from user
//			RoleResource roleResource = client.realm(tenantId).roles().get(roleName);
//			retrievedUser.roles().realmLevel().remove(Arrays.asList(roleResource.toRepresentation()));
//			return true;
//		} catch (ApplicationSettingsException ex) {
//			logger.error("Error getting values from property file, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error getting values from property file, reason " + ex.getMessage());
//			throw exception;
//		} finally {
//			if (client != null) {
//				client.close();
//			}
//		}
//	}



//	public static RealmRepresentation createDefaultRoles(RealmRepresentation realmDetails){
//		List<RoleRepresentation> defaultRoles = new ArrayList<RoleRepresentation>();
//		RoleRepresentation adminRole = new RoleRepresentation();
//		adminRole.setName("admin");
//		adminRole.setDescription("Admin role for PGA users");
//		defaultRoles.add(adminRole);
//		RoleRepresentation adminReadOnlyRole = new RoleRepresentation();
//		adminReadOnlyRole.setName("admin-read-only");
//		adminReadOnlyRole.setDescription("Read only role for PGA Admin users");
//		defaultRoles.add(adminReadOnlyRole);
//		RoleRepresentation gatewayUserRole = new RoleRepresentation();
//		gatewayUserRole.setName("gateway-user");
//		gatewayUserRole.setDescription("default role for PGA users");
//		defaultRoles.add(gatewayUserRole);
//		RoleRepresentation pendingUserRole = new RoleRepresentation();
//		pendingUserRole.setName("user-pending");
//		pendingUserRole.setDescription("role for newly registered PGA users");
//		defaultRoles.add(pendingUserRole);
//		RoleRepresentation gatewayProviderRole = new RoleRepresentation();
//		gatewayProviderRole.setName("gateway-provider");
//		gatewayProviderRole.setDescription("role for gateway providers in the super-admin PGA");
//		defaultRoles.add(gatewayProviderRole);
//		RolesRepresentation rolesRepresentation = new RolesRepresentation();
//		rolesRepresentation.setRealm(defaultRoles);
//		realmDetails.setRoles(rolesRepresentation);
//		return realmDetails;
//	}






//	public String deactivateUser(Map<String, Object> request) {
//		try {
//			Keycloak keycloak = KeyCloakConnectionProvider.getConnection();
//			String userId = (String) request.get(JsonKey.USER_ID);
//			UserResource resource =
//					keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//			UserRepresentation ur = resource.toRepresentation();
//			ur.setEnabled(false);
//			if (isNotNull(resource)) {
//				try {
//					resource.update(ur);
//				} catch (Exception ex) {
//					ProjectLogger.log(ex.getMessage(), ex);
//					throw new ProjectCommonException(ResponseCode.invalidUsrData.getErrorCode(),
//							ResponseCode.invalidUsrData.getErrorMessage(),
//							ResponseCode.CLIENT_ERROR.getResponseCode());
//				}
//
//			}
//		} catch (Exception e) {
//			ProjectLogger.log(e.getMessage(), e);
//			throw new ProjectCommonException(ResponseCode.invalidUsrData.getErrorCode(),
//					ResponseCode.invalidUsrData.getErrorMessage(),
//					ResponseCode.CLIENT_ERROR.getResponseCode());
//		}
//		return JsonKey.SUCCESS;
//	}




//	public boolean enableUserAccount(PasswordCredential realmAdminCreds, String tenantId, String username) throws IamAdminServicesException{
//		Keycloak client = null;
//		try{
//			client = TenantManagementKeycloakImpl.getClient(ServerSettings.getIamServerUrl(), tenantId, realmAdminCreds);
//			List<UserRepresentation> userResourceList = client.realm(tenantId).users().search(username,0,1);
//			UserResource userResource = client.realm(tenantId).users().get(userResourceList.get(0).getId());
//			UserRepresentation profile = userResource.toRepresentation();
//			profile.setEnabled(true);
//			// We require that a user verify their email before enabling the account
//			profile.setEmailVerified(true);
//			userResource.update(profile);
//			return true;
//		} catch (ApplicationSettingsException ex) {
//			logger.error("Error getting values from property file, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error getting values from property file, reason " + ex.getMessage());
//			throw exception;
//		} finally {
//			if (client != null) {
//				client.close();
//			}
//		}
//	}




//	@Override
//	public List<UserProfile> findUser(PasswordCredential realmAdminCreds, String tenantId, String email, String userName) throws IamAdminServicesException{
//		Keycloak client = null;
//		try{
//			client = TenantManagementKeycloakImpl.getClient(ServerSettings.getIamServerUrl(), tenantId, realmAdminCreds);
//			List<UserRepresentation> retrieveUserList = client.realm(tenantId).users().search(userName,
//					null,
//					null,
//					email,
//					0, 1);
//			if(!retrieveUserList.isEmpty())
//			{
//				List<UserProfile> userList = new ArrayList<>();
//				for(UserRepresentation user : retrieveUserList){
//					UserProfile profile = new UserProfile();
//					profile.setUserId(user.getUsername());
//					profile.setFirstName(user.getFirstName());
//					profile.setLastName(user.getLastName());
//					profile.setEmails(Arrays.asList(new String[]{user.getEmail()}));
//					userList.add(profile);
//				}
//				return userList;
//			}else{
//				logger.error("requested User not found");
//				return null;
//			}
//		} catch (ApplicationSettingsException ex) {
//			logger.error("Error getting values from property file, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error getting values from property file, reason " + ex.getMessage());
//			throw exception;
//		} catch (Exception ex){
//			logger.error("Error finding user in keycloak server, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error finding user in keycloak server, reason: " + ex.getMessage());
//			throw exception;
//		} finally {
//			if (client != null) {
//				client.close();
//			}
//		}
//	}
//
//	@Override
//	public void updateUserProfile(PasswordCredential realmAdminCreds, String tenantId, String username, UserProfile userDetails) throws IamAdminServicesException {
//
//		Keycloak client = null;
//		try{
//			client = TenantManagementKeycloakImpl.getClient(ServerSettings.getIamServerUrl(), tenantId, realmAdminCreds);
//			List<UserRepresentation> retrieveUserList = client.realm(tenantId).users().search(username,
//					null,
//					null,
//					null,
//					0, 1);
//			if(!retrieveUserList.isEmpty())
//			{
//				UserRepresentation userRepresentation = retrieveUserList.get(0);
//				userRepresentation.setFirstName(userDetails.getFirstName());
//				userRepresentation.setLastName(userDetails.getLastName());
//				userRepresentation.setEmail(userDetails.getEmails().get(0));
//				UserResource userResource = client.realm(tenantId).users().get(userRepresentation.getId());
//				userResource.update(userRepresentation);
//			}else{
//				throw new IamAdminServicesException("User [" + username + "] wasn't found in Keycloak!");
//			}
//		} catch (ApplicationSettingsException ex) {
//			logger.error("Error getting values from property file, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error getting values from property file, reason " + ex.getMessage());
//			throw exception;
//		} catch (Exception ex){
//			logger.error("Error updating user profile in keycloak server, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error updating user profile in keycloak server, reason: " + ex.getMessage());
//			throw exception;
//		} finally {
//			if (client != null) {
//				client.close();
//			}
//		}
//	}
//
//	@Override
//	public boolean addRoleToUser(PasswordCredential realmAdminCreds, String tenantId, String username, String roleName) throws IamAdminServicesException {
//
//		Keycloak client = null;
//		try{
//			client = TenantManagementKeycloakImpl.getClient(ServerSettings.getIamServerUrl(), tenantId, realmAdminCreds);
//			List<UserRepresentation> retrieveCreatedUserList = client.realm(tenantId).users().search(username,
//					null,
//					null,
//					null,
//					0, 1);
//			UserResource retrievedUser = client.realm(tenantId).users().get(retrieveCreatedUserList.get(0).getId());
//
//			// Add user to the role
//			RoleResource roleResource = client.realm(tenantId).roles().get(roleName);
//			retrievedUser.roles().realmLevel().add(Arrays.asList(roleResource.toRepresentation()));
//			return true;
//		} catch (ApplicationSettingsException ex) {
//			logger.error("Error getting values from property file, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error getting values from property file, reason " + ex.getMessage());
//			throw exception;
//		} finally {
//			if (client != null) {
//				client.close();
//			}
//		}
//	}
//
//	@Override
//	public boolean removeRoleFromUser(PasswordCredential realmAdminCreds, String tenantId, String username, String roleName) throws IamAdminServicesException {
//
//		Keycloak client = null;
//		try{
//			client = TenantManagementKeycloakImpl.getClient(ServerSettings.getIamServerUrl(), tenantId, realmAdminCreds);
//			List<UserRepresentation> retrieveCreatedUserList = client.realm(tenantId).users().search(username,
//					null,
//					null,
//					null,
//					0, 1);
//			UserResource retrievedUser = client.realm(tenantId).users().get(retrieveCreatedUserList.get(0).getId());
//
//			// Remove role from user
//			RoleResource roleResource = client.realm(tenantId).roles().get(roleName);
//			retrievedUser.roles().realmLevel().remove(Arrays.asList(roleResource.toRepresentation()));
//			return true;
//		} catch (ApplicationSettingsException ex) {
//			logger.error("Error getting values from property file, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error getting values from property file, reason " + ex.getMessage());
//			throw exception;
//		} finally {
//			if (client != null) {
//				client.close();
//			}
//		}
//	}
//
//	@Override
//	public List<UserProfile> getUsersWithRole(PasswordCredential realmAdminCreds, String tenantId, String roleName) throws IamAdminServicesException {
//		Keycloak client = null;
//		try{
//			client = TenantManagementKeycloakImpl.getClient(ServerSettings.getIamServerUrl(), tenantId, realmAdminCreds);
//			// FIXME: this only searches through the most recent 100 users for the given role (assuming there are no more than 10,000 users in the gateway)
//			int totalUserCount = client.realm(tenantId).users().count();
//			logger.debug("getUsersWithRole: totalUserCount=" + totalUserCount);
//			// Load all users in batches
//			List<UserRepresentation> allUsers = new ArrayList<>();
//			int userBatchSize = 100;
//			for (int start = 0; start < totalUserCount; start=start+userBatchSize) {
//
//				logger.debug("getUsersWithRole: fetching " + userBatchSize + " users...");
//				allUsers.addAll(client.realm(tenantId).users().search(null,
//						null,
//						null,
//						null,
//						start, userBatchSize));
//			}
//			logger.debug("getUsersWithRole: all users count=" + allUsers.size());
//			allUsers.sort((a, b) -> a.getCreatedTimestamp() - b.getCreatedTimestamp() > 0 ? -1 : 1);
//			// The 100 most recently created users
//			List<UserRepresentation> mostRecentUsers = allUsers.subList(0, Math.min(allUsers.size(), 100));
//			logger.debug("getUsersWithRole: most recent users count=" + mostRecentUsers.size());
//
//			List<UserProfile> usersWithRole = new ArrayList<>();
//			for (UserRepresentation user: mostRecentUsers) {
//				UserResource userResource = client.realm(tenantId).users().get(user.getId());
//
//				List<RoleRepresentation> roleRepresentations = userResource.roles().realmLevel().listAll();
//				for (RoleRepresentation roleRepresentation : roleRepresentations){
//					if (roleRepresentation.getName().equals(roleName)) {
//						usersWithRole.add(convertUserRepresentationToUserProfile(user, tenantId));
//						break;
//					}
//				}
//			}
//			logger.debug("getUsersWithRole: most recent users with role count=" + usersWithRole.size());
//			return usersWithRole;
//		} catch (ApplicationSettingsException ex) {
//			logger.error("Error getting values from property file, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error getting values from property file, reason " + ex.getMessage());
//			throw exception;
//		} finally {
//			if (client != null) {
//				logger.debug("getUsersWithRole: closing client...");
//				client.close();
//				logger.debug("getUsersWithRole: client closed");
//			}
//		}
//	}

//
//	public String activateUser(Map<String, Object> request) {
//		try {
//			Keycloak keycloak = KeyCloakConnectionProvider.getConnection();
//			String userId = (String) request.get(JsonKey.USER_ID);
//			UserResource resource =
//					keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//			UserRepresentation ur = resource.toRepresentation();
//			ur.setEnabled(true);
//			if (isNotNull(resource)) {
//				try {
//					resource.update(ur);
//				} catch (Exception ex) {
//					ProjectLogger.log(ex.getMessage(), ex);
//					throw new ProjectCommonException(ResponseCode.invalidUsrData.getErrorCode(),
//							ResponseCode.invalidUsrData.getErrorMessage(),
//							ResponseCode.CLIENT_ERROR.getResponseCode());
//				}
//
//			}
//		} catch (Exception e) {
//			ProjectLogger.log(e.getMessage(), e);
//			throw new ProjectCommonException(ResponseCode.invalidUsrData.getErrorCode(),
//					ResponseCode.invalidUsrData.getErrorMessage(),
//					ResponseCode.CLIENT_ERROR.getResponseCode());
//		}
//		return JsonKey.SUCCESS;
//	}
//	@Override
//	public boolean isEmailVerified(String userId) {
//		UserResource resource =
//				keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//		if (isNull(resource)) {
//			return false;
//		}
//		return resource.toRepresentation().isEmailVerified();
//	}
//
//	public void setEmailVerifiedUpdatedFlag(String userId, String flag) {
//		UserResource resource =
//				keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//		UserRepresentation user = resource.toRepresentation();
//		Map<String, List<String>> map = user.getAttributes();
//		List<String> list = new ArrayList<>();
//		list.add(flag);
//		if (map == null) {
//			map = new HashMap<>();
//		}
//		map.put(JsonKey.EMAIL_VERIFIED_UPDATED, list);
//		user.setAttributes(map);
//		resource.update(user);
//	}
//
//
//	public String getEmailVerifiedUpdatedFlag(String userId) {
//		UserResource resource =
//				keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//		UserRepresentation user = resource.toRepresentation();
//		Map<String, List<String>> map = user.getAttributes();
//		List<String> list = map.get(JsonKey.EMAIL_VERIFIED_UPDATED);
//		if (!list.isEmpty()) {
//			return list.get(0);
//		} else {
//			return "";
//		}
//	}
//
//	@Override
//	public boolean addUserLoginTime(String userId) {
//		boolean response = true;
//		try {
//			UserResource resource =
//					keycloak.realm(KeyCloakConnectionProvider.SSO_REALM).users().get(userId);
//			UserRepresentation ur = resource.toRepresentation();
//			Map<String, List<String>> map = ur.getAttributes();
//			List<String> list = new ArrayList<>();
//			if (map == null) {
//				map = new HashMap<>();
//			}
//			List<String> currentLogTime = map.get(JsonKey.CURRENT_LOGIN_TIME);
//			if (currentLogTime == null || currentLogTime.isEmpty()) {
//				currentLogTime = new ArrayList<>();
//				currentLogTime.add(Long.toString(System.currentTimeMillis()));
//			} else {
//				list.add(currentLogTime.get(0));
//				currentLogTime.clear();
//				currentLogTime.add(0, Long.toString(System.currentTimeMillis()));
//			}
//			map.put(JsonKey.CURRENT_LOGIN_TIME, currentLogTime);
//			map.put(JsonKey.LAST_LOGIN_TIME, list);
//			ur.setAttributes(map);
//			resource.update(ur);
//		} catch (Exception e) {
//			ProjectLogger.log(e.getMessage(), e);
//			response = false;
//		}
//		return response;
//	}
//
//
//	public List<UserProfile> getUsersWithRole(PasswordCredential realmAdminCreds, String tenantId, String roleName) throws IamAdminServicesException {
//		Keycloak client = null;
//		try{
//			client = TenantManagementKeycloakImpl.getClient(ServerSettings.getIamServerUrl(), tenantId, realmAdminCreds);
//			// FIXME: this only searches through the most recent 100 users for the given role (assuming there are no more than 10,000 users in the gateway)
//			int totalUserCount = client.realm(tenantId).users().count();
//			logger.debug("getUsersWithRole: totalUserCount=" + totalUserCount);
//			// Load all users in batches
//			List<UserRepresentation> allUsers = new ArrayList<>();
//			int userBatchSize = 100;
//			for (int start = 0; start < totalUserCount; start=start+userBatchSize) {
//
//				logger.debug("getUsersWithRole: fetching " + userBatchSize + " users...");
//				allUsers.addAll(client.realm(tenantId).users().search(null,
//						null,
//						null,
//						null,
//						start, userBatchSize));
//			}
//			logger.debug("getUsersWithRole: all users count=" + allUsers.size());
//			allUsers.sort((a, b) -> a.getCreatedTimestamp() - b.getCreatedTimestamp() > 0 ? -1 : 1);
//			// The 100 most recently created users
//			List<UserRepresentation> mostRecentUsers = allUsers.subList(0, Math.min(allUsers.size(), 100));
//			logger.debug("getUsersWithRole: most recent users count=" + mostRecentUsers.size());
//
//			List<UserProfile> usersWithRole = new ArrayList<>();
//			for (UserRepresentation user: mostRecentUsers) {
//				UserResource userResource = client.realm(tenantId).users().get(user.getId());
//
//				List<RoleRepresentation> roleRepresentations = userResource.roles().realmLevel().listAll();
//				for (RoleRepresentation roleRepresentation : roleRepresentations){
//					if (roleRepresentation.getName().equals(roleName)) {
//						usersWithRole.add(convertUserRepresentationToUserProfile(user, tenantId));
//						break;
//					}
//				}
//			}
//			logger.debug("getUsersWithRole: most recent users with role count=" + usersWithRole.size());
//			return usersWithRole;
//		} catch (ApplicationSettingsException ex) {
//			logger.error("Error getting values from property file, reason: " + ex.getMessage(), ex);
//			IamAdminServicesException exception = new IamAdminServicesException();
//			exception.setMessage("Error getting values from property file, reason " + ex.getMessage());
//			throw exception;
//		} finally {
//			if (client != null) {
//				logger.debug("getUsersWithRole: closing client...");
//				client.close();
//				logger.debug("getUsersWithRole: client closed");
//			}
//		}
//	}